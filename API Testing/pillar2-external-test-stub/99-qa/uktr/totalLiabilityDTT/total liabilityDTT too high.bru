meta {
  name: total liabilityDTT too high
  type: http
  seq: 4
}

post {
  url: {{externalTestStubUrl}}/RESTAdapter/plr/uk-tax-return
  body: json
  auth: none
}

headers {
  X-Pillar2-Id: {{testPlrId}}
  Authorization: validBearerToken
}

body:json {
  {
    "accountingPeriodFrom": "2024-01-01",
    "accountingPeriodTo": "2024-12-31",
    "obligationMTT": false,
    "electionUKGAAP": true,
    "liabilities": {
      "electionDTTSingleMember": false,
      "electionUTPRSingleMember": false,
      "numberSubGroupDTT": 1,
      "numberSubGroupUTPR": 1,
      "totalLiability": 1000,
      "totalLiabilityDTT": {{totalLiabilityDTT}},
      "totalLiabilityIIR": 4000,
      "totalLiabilityUTPR": 10000.99,
      "liableEntities": [
        {
          "ukChargeableEntityName": "Newco PLC",
          "idType": "CRN",
          "idValue": "12345678",
          "amountOwedDTT": 5000,
          "amountOwedIIR": 3400,
          "amountOwedUTPR": 6000.5
        }
      ]
    }
  }
}

script:pre-request {
  let testAmount = ( Math.random() * (99999999999999 - 10000000000000) + 10000000000000).toFixed(2)
  let negative = Math.random() < 0.5;
  var testValue = negative ? testAmount * -1 : testAmount
  bru.setVar("totalLiabilityDTT",testValue)
}

tests {
  test("Status code is 422", function() {
    expect(res.getStatus()).to.equal(422)
  });
  
  test("Response contains error code 098", function() {
    expect(res.body.errors.code).to.equal('098')
  });
  
  test("Response contains error message", function() {
    expect(res.body.errors.text).to.equal('Invalid total liability DTT')
  });
  
}
