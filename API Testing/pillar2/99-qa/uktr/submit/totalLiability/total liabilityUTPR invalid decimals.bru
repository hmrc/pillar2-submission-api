meta {
  name: total liabilityUTPR invalid decimals
  type: http
  seq: 8
}

post {
  url: {{pillar2Url}}/submit-uk-tax-return
  body: json
  auth: none
}

headers {
  X-Pillar2-Id: {{testPlrId}}
  Authorization: {{bearerToken}}
}

body:json {
  {
    "accountingPeriodFrom": "2024-01-01",
    "accountingPeriodTo": "2024-12-31",
    "obligationMTT": false,
    "electionUKGAAP": true,
    "liabilities": {
      "electionDTTSingleMember": false,
      "electionUTPRSingleMember": false,
      "numberSubGroupDTT": 1,
      "numberSubGroupUTPR": 1,
      "totalLiability": 5000,
      "totalLiabilityDTT": 5000,
      "totalLiabilityIIR": 0,
      "totalLiabilityUTPR": 0.999,
      "liableEntities": [
        {
          "ukChargeableEntityName": "Newco PLC",
          "idType": "CRN",
          "idValue": "12345678",
          "amountOwedDTT": 5000,
          "amountOwedIIR": 0,
          "amountOwedUTPR": 0
        }
      ]
    }
  }
}

script:pre-request {
  let testAmount = ( Math.random() * (99999999999999 - 10000000000000) + 10000000000000).toFixed(2)
  let negative = Math.random() < 0.5;
  var testValue = negative ? testAmount * -1 : testAmount
  bru.setVar("totalLiabilityUTPR",testValue)
}

tests {
  test("Status code is 400", function() {
    expect(res.getStatus()).to.equal(400)
  });
  
  test("Response contains error code 400", function() {
    expect(res.body.error.code).to.equal('400')
  });
  
  test("Response contains error message", function() {
    expect(res.body.error.message).to.equal('Bad request')
    expect(res.body.error.logID).to.equal('C0000000000000000000000000000400')
  });
  
}
